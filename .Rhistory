plot(density(data$prediction, bw = .020), main = "Density of Predictions")
plot(density(data$prediction, bw = .018), main = "Density of Predictions")
plot(density(data$prediction, bw = .015), main = "Density of Predictions")
density(data$prediction, bw = .015)
x <- density(data$prediction, bw = .015)
x
class(x)
library(ROCR)
cut <- cutpointr(data = data, x = prediction, class = ref)
cut <- cut %>% mutate(optimal_cutpoint = .3)
plot(cut)
cut <- .3
data$prediction <- if_else(condition = data$prediction < cut, "no", "yes")
confusionMatrix(data = data$prediction, reference = data$ref, positive = "yes")
model
loaded_model <- read_rds("./pedis-model-logistic-regression.rds")
loaded_model <- read_rds(path = "./pedis-model-logistic-regression.rds")
plot(density(data$prediction, bw = .017), main = "Density of Predictions")
rm(list = ls())
library(caret)
library(cutpointr)
library(OptimalCutpoints)
library(RSQLite)
library(tidyverse)
con <- dbConnect(SQLite(), "./pedis-app-database.sqlite")
pedis <- dbReadTable(con, "tbl_pedis") %>% tbl_df
pedis <- pedis %>%  filter(endpoint != 888) %>% mutate(amputation_major = as.factor(x = amputation_major))
dbDisconnect(conn = con)
pedis <- read_csv("~/r-projects/pedis-diabetic-care/pedis-data-preprocessed.csv")
pedis
pred <- function(x) exp(x) / (1 + exp(x))
pred(10)
pred2 <- function(x) 1 / (1 + exp(-1 * x))
pred2(10)
rm(list = ls())
ls()
pedis <- read_csv("~/r-projects/pedis-diabetic-care/pedis-data-preprocessed.csv")
# define training settings
train_control <- trainControl(
summaryFunction = twoClassSummary,
method = "repeatedcv",
repeats = 5,
number = 5,
verboseIter = FALSE,
returnData = TRUE,
classProbs = TRUE)
# create tuning grid
tune_grid <- expand.grid(alpha = seq(0, 1, by = .1), lambda = seq(0, 1, length = 100))
con <- dbConnect(SQLite(), "./pedis-app-database.sqlite")
RSQLite::dbListTables(con)
library(caret)
library(cutpointr)
library(OptimalCutpoints)
library(RSQLite)
library(tidyverse)
pedis <- read_csv("~/r-projects/pedis-diabetic-care/pedis-data-preprocessed.csv")
# define training settings
train_control <- trainControl(
summaryFunction = twoClassSummary,
method = "repeatedcv",
repeats = 5,
number = 5,
verboseIter = FALSE,
returnData = TRUE,
classProbs = TRUE)
# na handling
options(na.action =  na.pass)
# create tuning grid
tune_grid <- expand.grid(alpha = seq(0, 1, by = .1), lambda = seq(0, 1, length = 100))
# na handling
options(na.action =  na.pass)
# matrix
x <- model.matrix(amputation ~  -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation + dialyse, data = pedis, na.action = na.pass)
y <- factor(pedis$amputation, ordered = TRUE)
# train model
model <- train(x = x, y = y,
preProcess = c("medianImpute", "zv", "center", "scale"),
method = "glmnet",
family = "binomial",
tuneGrid = tune_grid,
metric = "ROC",
trControl = train_control)
# look at final model
fit <- model$finalModel
plot(model)
lambda <- (fit$lambdaOpt)
lambda
plot(fit)
abline(v = lambda, lty = 2)
prediction <- predict(model, type = "prob")[, 2]
prediction
data
data <- tibble(prediction = prediction, ref = y)
data
plot(density(data$prediction, bw = .017), main = "Density of Predictions")
plot(density(data$prediction, bw = .017), main = "Density of Predictions", las = 1)
library(ROCR)
cut <- cutpointr(data = data, x = prediction, class = ref)
cut <- cut %>% mutate(optimal_cutpoint = .3)
plot(cut)
cut
cut <- .3
data$prediction <- if_else(condition = data$prediction < cut, "no", "yes")
data$prediction
cut
cut <- .13
data$prediction <- if_else(condition = data$prediction < cut, "no", "yes")
confusionMatrix(data = data$prediction, reference = data$ref, positive = "yes")
data$prediction
cut <- .13
data$prediction <- if_else(condition = data$prediction < cut, "no", "yes")
data
cut <- cutpointr(data = data, x = prediction, class = ref)
cut
cut <- cutpointr(data = data, x = prediction, class = ref)
prediction <- predict(model, type = "prob")[, 2]
prediction
data <- tibble(prediction = prediction, ref = y)
data
plot(density(data$prediction, bw = .017), main = "Density of Predictions", las = 1)
library(cutpointr)
data
# cut <- cutpointr(data = data, x = prediction, class = ref)
# cut <- cut %>% mutate(optimal_cutpoint = .3)
# plot(cut)
ggplot(data, aes(x = ref, y = prediction))
# cut <- cutpointr(data = data, x = prediction, class = ref)
# cut <- cut %>% mutate(optimal_cutpoint = .3)
# plot(cut)
ggplot(data, aes(x = ref, y = prediction)) +
geom_boxplot()
# cut <- cutpointr(data = data, x = prediction, class = ref)
# cut <- cut %>% mutate(optimal_cutpoint = .3)
# plot(cut)
ggplot(data, aes(x = ref, y = prediction)) +
geom_boxplot() +
geom_point()
cut <- .17
data$prediction <- if_else(condition = data$prediction < cut, "no", "yes")
data$prediction
confusionMatrix(data = data$prediction, reference = data$ref, positive = "yes")
data
data <- tibble(prediction = prediction, ref = y)
plot(density(data$prediction, bw = .017), main = "Density of Predictions", las = 1)
# cut <- cutpointr(data = data, x = prediction, class = ref)
# cut <- cut %>% mutate(optimal_cutpoint = .3)
# plot(cut)
ggplot(data, aes(x = ref, y = prediction)) +
geom_boxplot() +
geom_point()
cut <- .17
data$classified <- if_else(condition = data$prediction < cut, "no", "yes")
data$classified
confusionMatrix(data = data$classified, reference = data$ref, positive = "yes")
roc(data = data, x = data$prediction, class = data$ref)
data
roc(data = data, x = prediction, class = ref)
AUC::roc(data$prediction, data$ref)
roc_out <- AUC::roc(data$prediction, data$ref)
AUC::auc(roc_out)
model <- read_rds(path = "./pedis-model-logistic-regression.rds")
readRDS("./pedis-model-logistic-regression.rds")
readRDS("./pedis-model-logistic-regression.RDS")
pedis
x
y
lda(x = x, y = y)
MASS::lda(x = x, y = y)
library(MASS)
lda(x = x, y = y)
x
x[, -"dialyse"]
x %>% as_tibble()
x %>% as_tibble() %>% select(-dialyse)
lda(y ~ x)
x %>% as_tibble() %>% select(-dialyse)
x %>% as_tibble()
x %>% as_tibble() %>% dplyr::select(-dialyse)
x <- x %>% as_tibble() %>% dplyr::select(-dialyse)
lda(y ~ x)
lda(y ~ ., bind_cols(y, x))
bind_cols(y, x)
y
bind_cols(tibble(y = y), x)
training <- bind_cols(tibble(y = y), x)
lda(y ~ ., training)
# train model
model <- train(x = x, y = y,
preProcess = c("medianImpute", "zv", "center", "scale"),
method = "glmnet",
family = "binomial",
tuneGrid = tune_grid,
metric = "ROC",
trControl = train_control)
model <- train(x = x, y = y, preProcess = c("medianImpute", "zv", "center", "scale"))
model
?preProcess
preProcess(x = x, method = c("center", "scale", "medianImpute"))
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
predict(pre_process)
predict(pre_process, newdata = x)
x <- predict(pre_process, newdata = x)
x <- x %>% as_tibble() %>% dplyr::select(-dialyse)
training <- bind_cols(tibble(y = y), x)
training
lda(y ~ ., training)
model <- lda(y ~ ., training)
plot(model)
predict(model)
pred_lda <- predict(model)
pred_lda$class
pred_lda
tibble(pred = pred_lda$class,  pred_lda)
pred_lda
pred_lda$posterior
pred_lda$posterior$yes
bind_cols(tibble(pred = pred_lda$class), pred_lda$posterior)
tibble(pred = pred_lda$class)
bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior))
pred_lda
bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior))
pred_lda <- bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior))
pred_lda <- bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior)) %>% select(-no)
pred_lda <- bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior)) %>% dplyr::select(-no)
pred_lda <- bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior))
pred_lda <- predict(model)
pred_lda <- bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior)) %>% dplyr::select(-no)
pred_lda
ggplot(pred_lda, aes(x = pred)) + geom_density()
ggplot(pred_lda, aes(x = yes)) + geom_density()
ggplot(pred_lda, aes(x = yes)) + geom_density(bw = .1)
ggplot(pred_lda, aes(x = yes)) + geom_density(bw = .05)
ggplot(pred_lda, aes(x = yes)) + geom_density(bw = .07)
ggplot(pred_lda, aes(x = pred, y = yes)) + geom_boxplot()
pred_lda
pred_lda %>% mutate(classified = if_else(yes > .5, "yes", "no"))
pred_lda <- pred_lda %>% mutate(classified = if_else(yes > .5, "yes", "no"))
pred_lda
table(pred_lda$pred, pred_lda$classified)
AUC::roc(pred_lda$classified, labels = pred_lda$pred)
roc_lda <- AUC::roc(pred_lda$classified, labels = pred_lda$pred)
auc(roc_lda)
roc_lda
plot(roc_lda)
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
x <- x %>% as_tibble() %>% dplyr::select(-dialyse)
training <- bind_cols(tibble(y = y), x)
model <- lda(y ~ ., training)
plot(model)
pred_lda <- predict(model)
pred_lda <- bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior)) %>% dplyr::select(-no)
ggplot(pred_lda, aes(x = yes)) + geom_density(bw = .07)
ggplot(pred_lda, aes(x = pred, y = yes)) + geom_boxplot()
pred_lda <- pred_lda %>% mutate(classified = if_else(yes > .5, "yes", "no"))
table(pred_lda$pred, pred_lda$classified)
roc_lda <- AUC::roc(pred_lda$classified, labels = pred_lda$pred)
plot(roc_lda)
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
x <- x %>% as_tibble() %>% dplyr::select(-dialyse)
training <- bind_cols(tibble(y = y), x)
model <- lda(y ~ ., training)
plot(model)
pred_lda <- predict(model)
pred_lda <- bind_cols(tibble(pred = pred_lda$class), as_tibble(pred_lda$posterior)) %>% dplyr::select(-no)
ggplot(pred_lda, aes(x = yes)) + geom_density(bw = .07)
ggplot(pred_lda, aes(x = pred, y = yes)) + geom_boxplot()
pred_lda <- pred_lda %>% mutate(classified = if_else(yes > .5, "yes", "no"))
table(pred_lda$pred, pred_lda$classified)
roc_lda <- AUC::roc(pred_lda$classified, labels = pred_lda$pred)
plot(roc_lda)
pedis
pedis %>% glimpse()
pedis %>% count(endpunkt_erreicht)
pedis
pedis %>% count(endpunkt)
model.matrix(amputation ~ alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation)
model.matrix(amputation ~ alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
x <- model.matrix(amputation ~ alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
y <- pedis$amputation
y
tables(y)
table(y)
pedis
# define training settings
train_control <- trainControl(
summaryFunction = twoClassSummary,
method = "repeatedcv",
repeats = 5,
number = 5,
verboseIter = FALSE,
returnData = TRUE,
classProbs = TRUE)
train_control
tune_grid
?lda
train(x = x, y = y, method = "binda")
train(x = x, y = y, method = "lda")
x
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
x
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
x
train(x = x, y = y, method = "lda")
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
y <- pedis$amputation
train(x = x, y = y,
preProcess = pre_process,
method = "lda")
pre_process
x <- predict(pre_process, newdata = x)
train(x = x, y = y, method = "lda")
model_lda <- train(x = x, y = y, method = "lda")
plot(model_lda)
str(model_lda)
model_lda <- train(x = x, y = y, method = "lda", method = "cv")
train_control <- trainControl(method = "cv")
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control)
model_lda
warnings()
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary)
model_lda
model_lda$bestTune
model_lda$pred
model_lda
predict(model_lda)
predict(model_lda, type = "response")
predict(model_lda, type = "prob")
predicted_lda <- predict(model_lda, type = "prob")
bind_cols(tibble(y = y))
bind_cols(tibble(y = y), predicted_lda)
bind_cols(tibble(y = y), predicted_lda) %>% gg_plot(aes(x = y, y = yes)) + geom_boxplot()
bind_cols(tibble(y = y), predicted_lda) %>% ggplot(aes(x = y, y = yes)) + geom_boxplot()
train_control
bind_cols(tibble(y = y), predicted_lda) %>% ggplot(aes(x = y, y = yes)) + geom_boxplot()
train_control <- trainControl(method = "cv")
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary)
model_lda
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary, verbose = TRUE)
train_control <- trainControl(method = "cv")
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary, verbose = TRUE)
model_lda
predicted_lda <- predict(model_lda, type = "prob")
bind_cols(tibble(y = y), predicted_lda) %>% ggplot(aes(x = y, y = yes)) + geom_boxplot()
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary, verbose = TRUE)
predicted_lda <- predict(model_lda, type = "prob")
bind_cols(tibble(y = y), predicted_lda) %>% ggplot(aes(x = y, y = yes)) + geom_boxplot()
train_control <- trainControl(method = "cv", number = 5)
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary, verbose = TRUE)
predicted_lda <- predict(model_lda, type = "prob")
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
x
x[, -"lokalisationfoot"]
x[, -c("lokalisationfoot")]
x
x %>% tibble()
x %>% as_tibble()
x %>% as_tibble() %>% select(-lokalisationfoot)
x %>% as_tibble() %>% dplyr::select(-lokalisationfoot)
x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot)
y <- pedis$amputation
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
train_control <- trainControl(method = "cv", number = 5)
model_lda <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary, verbose = TRUE)
model_lda
lda(x, y)
lda(x, y) %>% predict
d <- lda(x, y) %>% predict
d$class
d$posterior
d$posterior[, 2]
cbind(d$class, d$posterior[, 2])
cbind(d$class, d$posterior[, 2]) %>% mutate()
cbind(d$class, d$posterior[, 2]) %>% as_tibble
x
train(x = x, y = y, method = "lda", summaryFunction = twoClassSummary())
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot)
y <- pedis$amputation
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
x
train(x = x, y = y, method = "lda", summaryFunction = twoClassSummary())
warnings()
x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot) %>% as.matrix
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot) %>% as.matrix
y <- pedis$amputation
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
x
train(x = x, y = y, method = "lda", summaryFunction = twoClassSummary())
x
train(x = x, y = y, method = "lda")
train(x = x, y = y, method = "lda", method = "none")
train(x = x, y = y, method = "lda", method = "")
?train
train_control <- trainControl(method = "cv", number = 5)
train(x = x, y = y, method = "lda", trControl = train_control)
model1 <- train(x = x, y = y, method = "lda", trControl = train_control)
model1 <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary)
model1
twoClassSummary(model1)
model1
?trainControl
train_control <- trainControl(method = "none")
train_control
model1 <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary)
model1
predict(model1)
model1$pred
predict(model1, type = "prob")
predict(model1, type = "prob")[, "yes"]
pred <- predict(model1, type = "prob")[, "yes"]
tibble(y, pred)
tibble(y, pred) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
model1 <- lda(x, y)
model1
pred <- predict(model1, type = "prob")[, "yes"]
model1 <- lda(y, x)
model1 <- lda(y = y, x = x)
model1 <- lda(y ~ x)
model1
pred <- predict(model1, type = "prob")[, "yes"]
predict(model1, type = "prob")
pred <- predict(model1, type = "prob")$posterior[, "yes"]
tibble(y, pred) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
# x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot) %>% as.matrix
y <- pedis$amputation
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
train_control <- trainControl(method = "none")
model1 <- lda(y ~ x)
pred <- predict(model1, type = "prob")$posterior[, "yes"]
tibble(y, pred) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
meth <- "PenalizedLDA"
x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot) %>% as.matrix
x
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot) %>% as.matrix
y <- pedis$amputation
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
x
train_control <- trainControl(method = "none")
model1 <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary)
model1 <- lda(y ~ x)
pred <- predict(model1, type = "prob")$posterior[, "yes"]
tibble(y, pred) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
train(x = x, y = y, method = meth)
x
y
meth <- "PenalizedLDA"
train(x = x, y = y, method = meth)
install.packages("plyr")
train(x = x, y = y, method = meth)
library(MASS)
library(caret)
library(dplyr)
meth <- "PenalizedLDA"
train(x = x, y = y, method = meth)
meth <- "qda"
train(x = x, y = y, method = meth)
warnings()
# lda with caret ----------------------------------------------------------
pedis
x <- model.matrix(amputation ~ -1 + alter_bei_aufnahme + p + e + d + i + s + crp_wert_bei_aufnahme + lokalisation, data = pedis)
x <- x %>% as_tibble() %>% dplyr::select(-lokalisationfoot) %>% as.matrix
y <- pedis$amputation
pre_process <- preProcess(x = x, method = c("center", "scale", "medianImpute"))
x <- predict(pre_process, newdata = x)
train_control <- trainControl(method = "none")
model1 <- train(x = x, y = y, method = "lda", trControl = train_control, summaryFunction = twoClassSummary)
model1 <- lda(y ~ x)
pred <- predict(model1, type = "prob")$posterior[, "yes"]
tibble(y, pred) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
train(x = x, y = y, method = meth, trControl = train_control)
model1 <- train(x = x, y = y, method = meth, trControl = train_control)
pred <- predict(model1, type = "prob")$posterior[, "yes"]
tibble(y, pred) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
pred
pred <- predict(model1, type = "prob")$posterior[, "yes"]
pred
predict(model1)
predict(model1, type = "prob")
pred <- predict(model1, type = "prob")
tibble(y, pred) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
tibble(y, pred)
pred
tibble(y, pred$yes) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
tibble(y, pred$yes)
tibble(y, pred = pred$yes) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot()
tibble(y, pred = pred$yes) %>% ggplot(aes(x = y, y = pred)) + geom_boxplot() + geom_point()
meth <- "qda"
train_control <- trainControl(method = "cv")
train_control
train_control <- trainControl(method = "cv", number = 5)
model1 <- train(x = x, y = y, method = meth, trControl = train_control)
shiny::runApp()
runApp()
shiny::runApp()
install.packages("ggthemes")
shiny::runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
